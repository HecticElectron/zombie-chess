{"ast":null,"code":"var _jsxFileName = \"/Users/hecticelectron/projects/zombie-chess/src/Square.js\",\n  _s = $RefreshSig$();\nimport React, { Component, createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\nimport GameStateProvider, { useGameStateContext, rowDictionary, columnDictionary } from './GameStateProvider';\nimport Piece, { checkForLegalMove } from './Piece';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst selectSquare = (rowIndex, columnIndex) => {\n  if (gameState.sourceSquare.rowIndex === -1) {\n    setGameState({\n      ...gameState,\n      sourceSquare: {\n        rowIndex,\n        columnIndex\n      }\n    });\n  } else {\n    setGameState({\n      ...gameState,\n      targetSquare: {\n        rowIndex,\n        columnIndex\n      }\n    });\n  }\n};\nconst selectPiece = (rowIndex, columnIndex) => {\n  if (gameState.sourceSquare.rowIndex === -1) {\n    setGameState({\n      ...gameState,\n      sourceSquare: {\n        rowIndex,\n        columnIndex\n      },\n      selectedPiece: gameState.boardState[rowIndex][columnIndex]\n    });\n  }\n};\nconst movePiece = (movedPiece, sourceSquare, targetSquare) => {\n  const boardState = gameState.boardState.map((row, rowIndex) => {\n    return row.map((piece, columnIndex) => {\n      if (rowIndex === sourceSquare.rowIndex && columnIndex === sourceSquare.columnIndex) {\n        return '';\n      } else if (rowIndex === targetSquare.rowIndex && columnIndex === targetSquare.columnIndex) {\n        return movedPiece;\n      } else {\n        return piece;\n      }\n    });\n  });\n  setGameState({\n    ...gameState,\n    boardState,\n    sourceSquare: {\n      rowIndex: -1,\n      columnIndex: -1\n    },\n    targetSquare: {\n      rowIndex: -1,\n      columnIndex: -1\n    }\n  });\n};\nexport default function Square({\n  rowIndex,\n  columnIndex,\n  children\n}) {\n  _s();\n  const {\n    gameState\n  } = useGameStateContext();\n  const {\n    sourceSquare,\n    targetSquare\n  } = gameState;\n  const [squareState, setSquareState] = useState({\n    isSourceSquare: false,\n    isTargetSquare: false\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-row\": rowIndex,\n    \"data-column\": columnIndex,\n    className: `square ${squareState.isSourceSquare ? 'selected-source ' : squareState.isTargetSquare ? 'selected-target ' : ''}row${rowDictionary[rowIndex]} column${columnDictionary[columnIndex]}`,\n    onClick: event => {\n      const pieceToMove = gameState.selectedPiece;\n      if (sourceSquare.rowIndex === -1) {\n        setSquareState({\n          ...squareState,\n          isSourceSquare: true\n        });\n        selectSquare(rowIndex, columnIndex);\n        selectPiece(rowIndex, columnIndex);\n      } else if (checkForLegalMove(pieceToMove, sourceSquare, {\n        rowIndex,\n        columnIndex\n      })) {\n        setSquareState({\n          ...squareState,\n          isTargetSquare: true\n        });\n        movePiece(pieceToMove, sourceSquare, targetSquare);\n      }\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(Square, \"evZfD54Yqyq9IBLWO5JrwAgZi6s=\", false, function () {\n  return [useGameStateContext];\n});\n_c = Square;\nvar _c;\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"names":["React","Component","createContext","useContext","useReducer","useRef","useState","Suspense","lazy","useEffect","GameStateProvider","useGameStateContext","rowDictionary","columnDictionary","Piece","checkForLegalMove","jsxDEV","_jsxDEV","selectSquare","rowIndex","columnIndex","gameState","sourceSquare","setGameState","targetSquare","selectPiece","selectedPiece","boardState","movePiece","movedPiece","map","row","piece","Square","children","_s","squareState","setSquareState","isSourceSquare","isTargetSquare","className","onClick","event","pieceToMove","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hecticelectron/projects/zombie-chess/src/Square.js"],"sourcesContent":["import React, { Component, createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\nimport GameStateProvider, { useGameStateContext, rowDictionary, columnDictionary } from './GameStateProvider';\nimport Piece, { checkForLegalMove } from './Piece';\n\nconst selectSquare = (rowIndex, columnIndex) => {\n  if (gameState.sourceSquare.rowIndex === -1) {\n    setGameState({\n      ...gameState,\n      sourceSquare: {\n        rowIndex,\n        columnIndex\n      }\n    });\n  } else {\n    setGameState({\n      ...gameState,\n      targetSquare: {\n        rowIndex,\n        columnIndex\n      }\n    });\n  }\n};\n\nconst selectPiece = (rowIndex, columnIndex) => {\n  if (gameState.sourceSquare.rowIndex === -1) {\n    setGameState({\n      ...gameState,\n      sourceSquare: {\n        rowIndex,\n        columnIndex\n      },\n      selectedPiece: gameState.boardState[rowIndex][columnIndex]\n    });\n  }\n};\n\nconst movePiece = (movedPiece, sourceSquare, targetSquare) => {\n  const boardState = gameState.boardState.map((row, rowIndex) => {\n    return row.map((piece, columnIndex) => {\n      if (rowIndex === sourceSquare.rowIndex && columnIndex === sourceSquare.columnIndex) {\n        return '';\n      } else if (rowIndex === targetSquare.rowIndex && columnIndex === targetSquare.columnIndex) {\n        return movedPiece;\n      } else {\n        return piece;\n      }\n    });\n  });\n  setGameState({\n    ...gameState,\n    boardState,\n    sourceSquare: {\n      rowIndex: -1,\n      columnIndex: -1\n    },\n    targetSquare: {\n      rowIndex: -1,\n      columnIndex: -1\n    }\n  });\n};\n\nexport default function Square({ rowIndex, columnIndex, children }) {\n  const { gameState } = useGameStateContext();\n  const { sourceSquare, targetSquare } = gameState;\n  const [squareState, setSquareState] = useState({\n    isSourceSquare: false,\n    isTargetSquare: false\n  });\n\n  return (\n    <div\n      data-row={rowIndex}\n      data-column={columnIndex}\n      className={`square ${squareState.isSourceSquare ? 'selected-source ' : (squareState.isTargetSquare ? 'selected-target ' : '')}row${rowDictionary[rowIndex]} column${columnDictionary[columnIndex]}`}\n      onClick={(event) => {\n        const pieceToMove = gameState.selectedPiece;\n        if (sourceSquare.rowIndex === -1) {\n          setSquareState({ ...squareState, isSourceSquare: true });\n          selectSquare(rowIndex, columnIndex);\n          selectPiece(rowIndex, columnIndex);\n        } else if (checkForLegalMove(pieceToMove, sourceSquare, { rowIndex, columnIndex })) {\n          setSquareState({ ...squareState, isTargetSquare: true });\n          movePiece(pieceToMove, sourceSquare, targetSquare);\n        }\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,QAAQ,OAAO;AAC5H,OAAOC,iBAAiB,IAAIC,mBAAmB,EAAEC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAC7G,OAAOC,KAAK,IAAIC,iBAAiB,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAACC,QAAQ,EAAEC,WAAW,KAAK;EAC9C,IAAIC,SAAS,CAACC,YAAY,CAACH,QAAQ,KAAK,CAAC,CAAC,EAAE;IAC1CI,YAAY,CAAC;MACX,GAAGF,SAAS;MACZC,YAAY,EAAE;QACZH,QAAQ;QACRC;MACF;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACLG,YAAY,CAAC;MACX,GAAGF,SAAS;MACZG,YAAY,EAAE;QACZL,QAAQ;QACRC;MACF;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAED,MAAMK,WAAW,GAAGA,CAACN,QAAQ,EAAEC,WAAW,KAAK;EAC7C,IAAIC,SAAS,CAACC,YAAY,CAACH,QAAQ,KAAK,CAAC,CAAC,EAAE;IAC1CI,YAAY,CAAC;MACX,GAAGF,SAAS;MACZC,YAAY,EAAE;QACZH,QAAQ;QACRC;MACF,CAAC;MACDM,aAAa,EAAEL,SAAS,CAACM,UAAU,CAACR,QAAQ,CAAC,CAACC,WAAW;IAC3D,CAAC,CAAC;EACJ;AACF,CAAC;AAED,MAAMQ,SAAS,GAAGA,CAACC,UAAU,EAAEP,YAAY,EAAEE,YAAY,KAAK;EAC5D,MAAMG,UAAU,GAAGN,SAAS,CAACM,UAAU,CAACG,GAAG,CAAC,CAACC,GAAG,EAAEZ,QAAQ,KAAK;IAC7D,OAAOY,GAAG,CAACD,GAAG,CAAC,CAACE,KAAK,EAAEZ,WAAW,KAAK;MACrC,IAAID,QAAQ,KAAKG,YAAY,CAACH,QAAQ,IAAIC,WAAW,KAAKE,YAAY,CAACF,WAAW,EAAE;QAClF,OAAO,EAAE;MACX,CAAC,MAAM,IAAID,QAAQ,KAAKK,YAAY,CAACL,QAAQ,IAAIC,WAAW,KAAKI,YAAY,CAACJ,WAAW,EAAE;QACzF,OAAOS,UAAU;MACnB,CAAC,MAAM;QACL,OAAOG,KAAK;MACd;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACFT,YAAY,CAAC;IACX,GAAGF,SAAS;IACZM,UAAU;IACVL,YAAY,EAAE;MACZH,QAAQ,EAAE,CAAC,CAAC;MACZC,WAAW,EAAE,CAAC;IAChB,CAAC;IACDI,YAAY,EAAE;MACZL,QAAQ,EAAE,CAAC,CAAC;MACZC,WAAW,EAAE,CAAC;IAChB;EACF,CAAC,CAAC;AACJ,CAAC;AAED,eAAe,SAASa,MAAMA,CAAC;EAAEd,QAAQ;EAAEC,WAAW;EAAEc;AAAS,CAAC,EAAE;EAAAC,EAAA;EAClE,MAAM;IAAEd;EAAU,CAAC,GAAGV,mBAAmB,CAAC,CAAC;EAC3C,MAAM;IAAEW,YAAY;IAAEE;EAAa,CAAC,GAAGH,SAAS;EAChD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAG/B,QAAQ,CAAC;IAC7CgC,cAAc,EAAE,KAAK;IACrBC,cAAc,EAAE;EAClB,CAAC,CAAC;EAEF,oBACEtB,OAAA;IACE,YAAUE,QAAS;IACnB,eAAaC,WAAY;IACzBoB,SAAS,EAAE,UAAUJ,WAAW,CAACE,cAAc,GAAG,kBAAkB,GAAIF,WAAW,CAACG,cAAc,GAAG,kBAAkB,GAAG,EAAG,MAAM3B,aAAa,CAACO,QAAQ,CAAC,UAAUN,gBAAgB,CAACO,WAAW,CAAC,EAAG;IACpMqB,OAAO,EAAGC,KAAK,IAAK;MAClB,MAAMC,WAAW,GAAGtB,SAAS,CAACK,aAAa;MAC3C,IAAIJ,YAAY,CAACH,QAAQ,KAAK,CAAC,CAAC,EAAE;QAChCkB,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEE,cAAc,EAAE;QAAK,CAAC,CAAC;QACxDpB,YAAY,CAACC,QAAQ,EAAEC,WAAW,CAAC;QACnCK,WAAW,CAACN,QAAQ,EAAEC,WAAW,CAAC;MACpC,CAAC,MAAM,IAAIL,iBAAiB,CAAC4B,WAAW,EAAErB,YAAY,EAAE;QAAEH,QAAQ;QAAEC;MAAY,CAAC,CAAC,EAAE;QAClFiB,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEG,cAAc,EAAE;QAAK,CAAC,CAAC;QACxDX,SAAS,CAACe,WAAW,EAAErB,YAAY,EAAEE,YAAY,CAAC;MACpD;IACF,CAAE;IAAAU,QAAA,EAEDA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACZ,EAAA,CA5BuBF,MAAM;EAAA,QACNtB,mBAAmB;AAAA;AAAAqC,EAAA,GADnBf,MAAM;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}