{"ast":null,"code":"var _jsxFileName = \"/Users/hecticelectron/projects/zombie-chess/src/GameStateProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGameState = {\n  isActiveGame: true,\n  isWhiteTurn: true,\n  isCheck: false,\n  isCheckmate: false,\n  moveNumber: 1,\n  history: [],\n  selectedPiece: '',\n  selectedSquare: {\n    rowIndex: -1,\n    columnIndex: -1\n  },\n  boardState: [['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'], ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'], ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']]\n};\nexport const rowDictionary = ['1', '2', '3', '4', '5', '6', '7', '8'];\nexport const columnDictionary = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\nconst GameStateContext = /*#__PURE__*/createContext();\n\n// export const useGameStateContext = () => useContext(GameStateContext);\n\nexport function useGameStateContext() {\n  _s();\n  return useContext(GameStateContext);\n}\n_s(useGameStateContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function GameStateProvider({\n  children\n}) {\n  _s2();\n  const [gameState, setGameState] = useState(initialGameState);\n  const setSelectedPiece = piece => {\n    setGameState({\n      ...gameState,\n      selectedPiece: piece\n    });\n  };\n  const setSelectedSquare = (rowIndex, columnIndex) => {\n    // const newBoardState = gameState.boardState.map((row, rIndex) => {\n    //   return row.map((currentPiece, cIndex) => {\n    //     if (rIndex === rowIndex && cIndex === columnIndex) {\n    //       return '';\n    //     } else if (rowIndex === targetSquare.rowIndex && columnIndex === targetSquare.columnIndex) {\n    //       return selectedPiece;\n    //     } else {\n    //       return currentPiece;\n    //     }\n    //   });\n    // });\n\n    setGameState({\n      ...gameState,\n      selectedSquare: {\n        rowIndex,\n        columnIndex\n      }\n      // boardState: newBoardState\n    });\n  };\n  const movePiece = (selectedPiece, selectedSquare, targetSquare) => {\n    const newBoardState = gameState.boardState.map((row, rowIndex) => {\n      return row.map((currentPiece, columnIndex) => {\n        if (rowIndex === selectedSquare.rowIndex && columnIndex === selectedSquare.columnIndex) {\n          return '';\n        } else if (rowIndex === targetSquare.rowIndex && columnIndex === targetSquare.columnIndex) {\n          return selectedPiece;\n        } else {\n          return currentPiece;\n        }\n      });\n    });\n    setGameState({\n      ...gameState,\n      selectedSquare: {\n        rowIndex: -1,\n        columnIndex: -1\n      },\n      boardState: newBoardState\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GameStateContext.Provider, {\n    value: {\n      gameState,\n      setSelectedPiece,\n      setSelectedSquare,\n      movePiece\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s2(GameStateProvider, \"T5R0hbx7V0bZULXXXz2JnaINMUA=\");\n_c = GameStateProvider;\nvar _c;\n$RefreshReg$(_c, \"GameStateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useRef","useState","Suspense","lazy","useEffect","jsxDEV","_jsxDEV","initialGameState","isActiveGame","isWhiteTurn","isCheck","isCheckmate","moveNumber","history","selectedPiece","selectedSquare","rowIndex","columnIndex","boardState","rowDictionary","columnDictionary","GameStateContext","useGameStateContext","_s","GameStateProvider","children","_s2","gameState","setGameState","setSelectedPiece","piece","setSelectedSquare","movePiece","targetSquare","newBoardState","map","row","currentPiece","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hecticelectron/projects/zombie-chess/src/GameStateProvider.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\n\nconst initialGameState = {\n  isActiveGame: true,\n  isWhiteTurn: true,\n  isCheck: false,\n  isCheckmate: false,\n  moveNumber: 1,\n  history: [],\n  selectedPiece: '',\n  selectedSquare: {\n    rowIndex: -1,\n    columnIndex: -1\n  },\n  boardState: [\n    ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],\n    ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],\n    ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],\n    ['', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', ''],\n    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n    ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n  ]\n};\n\nexport const rowDictionary = [\n  '1', '2', '3', '4', '5', '6', '7', '8'\n];\n\nexport const columnDictionary = [\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'\n];\n\nconst GameStateContext = createContext();\n\n// export const useGameStateContext = () => useContext(GameStateContext);\n\nexport function useGameStateContext () {\n  return useContext(GameStateContext);\n}\n\nexport default function GameStateProvider ({ children }) {\n  const [gameState, setGameState] = useState(initialGameState);\n\n  const setSelectedPiece = (piece) => {\n    setGameState({\n      ...gameState,\n      selectedPiece: piece\n    });\n  }\n\n  const setSelectedSquare = (rowIndex, columnIndex) => {\n    // const newBoardState = gameState.boardState.map((row, rIndex) => {\n    //   return row.map((currentPiece, cIndex) => {\n    //     if (rIndex === rowIndex && cIndex === columnIndex) {\n    //       return '';\n    //     } else if (rowIndex === targetSquare.rowIndex && columnIndex === targetSquare.columnIndex) {\n    //       return selectedPiece;\n    //     } else {\n    //       return currentPiece;\n    //     }\n    //   });\n    // });\n\n    setGameState({\n      ...gameState,\n      selectedSquare: { rowIndex, columnIndex }\n      // boardState: newBoardState\n    });\n  }\n  \n  const movePiece = (selectedPiece, selectedSquare, targetSquare) => {\n    const newBoardState = gameState.boardState.map((row, rowIndex) => {\n      return row.map((currentPiece, columnIndex) => {\n        if (rowIndex === selectedSquare.rowIndex && columnIndex === selectedSquare.columnIndex) {\n          return '';\n        } else if (rowIndex === targetSquare.rowIndex && columnIndex === targetSquare.columnIndex) {\n          return selectedPiece;\n        } else {\n          return currentPiece;\n        }\n      });\n    });\n\n    setGameState({\n      ...gameState,\n      selectedSquare: {\n        rowIndex: -1,\n        columnIndex: -1\n      },\n      boardState: newBoardState\n    });\n  };\n\n  return (\n    <GameStateContext.Provider value={{ gameState, setSelectedPiece, setSelectedSquare, movePiece }}>\n      {children}\n    </GameStateContext.Provider>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}