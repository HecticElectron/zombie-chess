{"ast":null,"code":"var _jsxFileName = \"/Users/hecticelectron/projects/zombie-chess/src/Square.js\",\n  _s = $RefreshSig$();\nimport React, { Component, createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\nimport GameStateProvider, { useGameStateContext, rowDictionary, columnDictionary } from './GameStateProvider';\nimport Piece, { checkForLegalMove } from './Piece';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Square({\n  rowIndex,\n  columnIndex,\n  children\n}) {\n  _s();\n  const {\n    gameState,\n    setSelectedPiece,\n    setSelectedSquare,\n    movePiece\n  } = useGameStateContext();\n  const selectedSquare = gameState.selectedSquare;\n  const [squareState, setSquareState] = useState({\n    isClicked: false,\n    pieceHere: ''\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-row\": rowIndex,\n    \"data-column\": columnIndex,\n    className: `square ${squareState.isClicked ? 'selected-source ' : ''}row${rowDictionary[rowIndex]} column${columnDictionary[columnIndex]}`,\n    onClick: event => {\n      if (squareState.isClicked) {\n        // this square was just clicked. The player wants to unclick it:\n        setSquareState({\n          ...squareState,\n          isClicked: false\n        });\n      } else {\n        const selectedPiece = gameState.selectedPiece;\n        // this is the first time _this_ square has been clicked this turn. \n        // It may be the first or second square clicked this turn.\n        // check to see if a piece has been selected already, i.e., if this is the _second_ square clicked this turn:\n        if (selectedPiece) {\n          // this is the second square clicked this turn.\n          // (The first square clicked always has a piece on it, so selectedPiece is never blank.)\n          // check to see if that piece can be moved to this square:\n          if (checkForLegalMove(selectedPiece, selectedSquare, {\n            rowIndex,\n            columnIndex\n          })) {\n            // if so, register the selected piece as the piece on this square:\n            setSquareState({\n              ...squareState,\n              pieceHere: selectedPiece\n            });\n            // then move the piece from the original square to this square:\n            movePiece(selectedPiece, selectedSquare, {\n              rowIndex,\n              columnIndex\n            });\n          } else {\n            //if the piece can't be moved to this square, reset this square AND the originally clicked square:\n            setSquareState({\n              ...squareState,\n              isClicked: false\n            });\n            setSelectedSquare(-1, -1);\n          }\n        } else {\n          // this is the _first_ square clicked this turn. No piece has been selected yet.\n          // see if a piece is on this square:\n          const pieceHere = children.props.pieceName;\n          if (pieceHere) {\n            //if so, tell gameState that this is the new selected piece:\n            setSquareState({\n              isClicked: true,\n              pieceHere\n            });\n            setSelectedPiece(pieceHere);\n            setSelectedSquare(rowIndex, columnIndex);\n          } else {\n            //otherwise, reset this square's selected value and the selected value of any other square:\n          }\n        }\n      }\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_s(Square, \"JDfbs5e/wz9dhgLenyQ1NXGkpvQ=\", false, function () {\n  return [useGameStateContext];\n});\n_c = Square;\nvar _c;\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"names":["React","Component","createContext","useContext","useReducer","useRef","useState","Suspense","lazy","useEffect","GameStateProvider","useGameStateContext","rowDictionary","columnDictionary","Piece","checkForLegalMove","jsxDEV","_jsxDEV","Square","rowIndex","columnIndex","children","_s","gameState","setSelectedPiece","setSelectedSquare","movePiece","selectedSquare","squareState","setSquareState","isClicked","pieceHere","className","onClick","event","selectedPiece","props","pieceName","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hecticelectron/projects/zombie-chess/src/Square.js"],"sourcesContent":["import React, { Component, createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\nimport GameStateProvider, { useGameStateContext, rowDictionary, columnDictionary } from './GameStateProvider';\nimport Piece, { checkForLegalMove } from './Piece';\n\nexport default function Square({ rowIndex, columnIndex, children }) {\n  const { gameState, setSelectedPiece, setSelectedSquare, movePiece } = useGameStateContext();\n  const selectedSquare = gameState.selectedSquare;\n  const [squareState, setSquareState] = useState({\n    isClicked: false,\n    pieceHere: ''\n  });\n\n  return (\n    <div\n      data-row={rowIndex}\n      data-column={columnIndex}\n      className={`square ${squareState.isClicked ? 'selected-source ' : ''}row${rowDictionary[rowIndex]} column${columnDictionary[columnIndex]}`}\n      onClick={(event) => {\n        if (squareState.isClicked) {\n          // this square was just clicked. The player wants to unclick it:\n          setSquareState({ ...squareState, isClicked: false });\n        } else {\n          const selectedPiece = gameState.selectedPiece;\n          // this is the first time _this_ square has been clicked this turn. \n          // It may be the first or second square clicked this turn.\n          // check to see if a piece has been selected already, i.e., if this is the _second_ square clicked this turn:\n          if (selectedPiece) {\n            // this is the second square clicked this turn.\n            // (The first square clicked always has a piece on it, so selectedPiece is never blank.)\n            // check to see if that piece can be moved to this square:\n            if (checkForLegalMove(selectedPiece, selectedSquare, { rowIndex, columnIndex })) {\n              // if so, register the selected piece as the piece on this square:\n              setSquareState({ ...squareState, pieceHere: selectedPiece });\n              // then move the piece from the original square to this square:\n              movePiece(selectedPiece, selectedSquare, { rowIndex, columnIndex });\n            } else {\n              //if the piece can't be moved to this square, reset this square AND the originally clicked square:\n              setSquareState({ ...squareState, isClicked: false });\n              setSelectedSquare(-1, -1);\n            }\n          } else {\n            // this is the _first_ square clicked this turn. No piece has been selected yet.\n            // see if a piece is on this square:\n            const pieceHere = children.props.pieceName;\n            if (pieceHere) {\n              //if so, tell gameState that this is the new selected piece:\n              setSquareState({ isClicked: true, pieceHere });\n              setSelectedPiece(pieceHere);\n              setSelectedSquare(rowIndex, columnIndex);\n            } else {\n              //otherwise, reset this square's selected value and the selected value of any other square:\n            }\n          }\n        }\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,QAAQ,OAAO;AAC5H,OAAOC,iBAAiB,IAAIC,mBAAmB,EAAEC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAC7G,OAAOC,KAAK,IAAIC,iBAAiB,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,MAAMA,CAAC;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAClE,MAAM;IAAEC,SAAS;IAAEC,gBAAgB;IAAEC,iBAAiB;IAAEC;EAAU,CAAC,GAAGf,mBAAmB,CAAC,CAAC;EAC3F,MAAMgB,cAAc,GAAGJ,SAAS,CAACI,cAAc;EAC/C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC;IAC7CwB,SAAS,EAAE,KAAK;IAChBC,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,oBACEd,OAAA;IACE,YAAUE,QAAS;IACnB,eAAaC,WAAY;IACzBY,SAAS,EAAE,UAAUJ,WAAW,CAACE,SAAS,GAAG,kBAAkB,GAAG,EAAE,MAAMlB,aAAa,CAACO,QAAQ,CAAC,UAAUN,gBAAgB,CAACO,WAAW,CAAC,EAAG;IAC3Ia,OAAO,EAAGC,KAAK,IAAK;MAClB,IAAIN,WAAW,CAACE,SAAS,EAAE;QACzB;QACAD,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEE,SAAS,EAAE;QAAM,CAAC,CAAC;MACtD,CAAC,MAAM;QACL,MAAMK,aAAa,GAAGZ,SAAS,CAACY,aAAa;QAC7C;QACA;QACA;QACA,IAAIA,aAAa,EAAE;UACjB;UACA;UACA;UACA,IAAIpB,iBAAiB,CAACoB,aAAa,EAAER,cAAc,EAAE;YAAER,QAAQ;YAAEC;UAAY,CAAC,CAAC,EAAE;YAC/E;YACAS,cAAc,CAAC;cAAE,GAAGD,WAAW;cAAEG,SAAS,EAAEI;YAAc,CAAC,CAAC;YAC5D;YACAT,SAAS,CAACS,aAAa,EAAER,cAAc,EAAE;cAAER,QAAQ;cAAEC;YAAY,CAAC,CAAC;UACrE,CAAC,MAAM;YACL;YACAS,cAAc,CAAC;cAAE,GAAGD,WAAW;cAAEE,SAAS,EAAE;YAAM,CAAC,CAAC;YACpDL,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAC3B;QACF,CAAC,MAAM;UACL;UACA;UACA,MAAMM,SAAS,GAAGV,QAAQ,CAACe,KAAK,CAACC,SAAS;UAC1C,IAAIN,SAAS,EAAE;YACb;YACAF,cAAc,CAAC;cAAEC,SAAS,EAAE,IAAI;cAAEC;YAAU,CAAC,CAAC;YAC9CP,gBAAgB,CAACO,SAAS,CAAC;YAC3BN,iBAAiB,CAACN,QAAQ,EAAEC,WAAW,CAAC;UAC1C,CAAC,MAAM;YACL;UAAA;QAEJ;MACF;IACF,CAAE;IAAAC,QAAA,EAEDA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACnB,EAAA,CAvDuBJ,MAAM;EAAA,QAC0CP,mBAAmB;AAAA;AAAA+B,EAAA,GADnExB,MAAM;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}