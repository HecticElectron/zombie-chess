{"ast":null,"code":"var _jsxFileName = \"/Users/hecticelectron/projects/zombie-chess/src/GameStateProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGameState = {\n  isActiveGame: true,\n  isWhiteTurn: true,\n  sourceSquare: {\n    rowIndex: -1,\n    columnIndex: -1\n  },\n  targetSquare: {\n    rowIndex: -1,\n    columnIndex: -1\n  },\n  selectedPiece: '',\n  isCheck: false,\n  isCheckmate: false,\n  moveNumber: 1,\n  history: [],\n  boardState: [['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'], ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'], ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']]\n};\nexport const rowDictionary = ['1', '2', '3', '4', '5', '6', '7', '8'];\nexport const columnDictionary = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\nconst GameStateContext = /*#__PURE__*/createContext();\n\n// export const useGameStateContext = () => useContext(GameStateContext);\n\nexport function useGameStateContext() {\n  _s();\n  return useContext(GameStateContext);\n}\n_s(useGameStateContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function GameStateProvider({\n  children\n}) {\n  _s2();\n  const [gameState, setGameState] = useState(initialGameState);\n  const selectSquare = (rowIndex, columnIndex) => {\n    if (gameState.sourceSquare.rowIndex === -1) {\n      setGameState({\n        ...gameState,\n        sourceSquare: {\n          rowIndex,\n          columnIndex\n        }\n      });\n    } else {\n      setGameState({\n        ...gameState,\n        targetSquare: {\n          rowIndex,\n          columnIndex\n        }\n      });\n    }\n  };\n  const movePiece = (movedPiece, sourceSquare, targetSquare) => {\n    const boardState = gameState.boardState.map((row, rowIndex) => {\n      return row.map((piece, columnIndex) => {\n        if (rowIndex === sourceSquare.rowIndex && columnIndex === sourceSquare.columnIndex) {\n          return '';\n        } else if (rowIndex === targetSquare.rowIndex && columnIndex === targetSquare.columnIndex) {\n          return movedPiece;\n        } else {\n          return piece;\n        }\n      });\n    });\n    setGameState({\n      ...gameState,\n      boardState,\n      sourceSquare: {\n        rowIndex: -1,\n        columnIndex: -1\n      },\n      targetSquare: {\n        rowIndex: -1,\n        columnIndex: -1\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GameStateContext.Provider, {\n    value: {\n      gameState,\n      selectSquare,\n      movePiece\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s2(GameStateProvider, \"T5R0hbx7V0bZULXXXz2JnaINMUA=\");\n_c = GameStateProvider;\nvar _c;\n$RefreshReg$(_c, \"GameStateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useRef","useState","Suspense","lazy","useEffect","jsxDEV","_jsxDEV","initialGameState","isActiveGame","isWhiteTurn","sourceSquare","rowIndex","columnIndex","targetSquare","selectedPiece","isCheck","isCheckmate","moveNumber","history","boardState","rowDictionary","columnDictionary","GameStateContext","useGameStateContext","_s","GameStateProvider","children","_s2","gameState","setGameState","selectSquare","movePiece","movedPiece","map","row","piece","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hecticelectron/projects/zombie-chess/src/GameStateProvider.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\n\nconst initialGameState = {\n  isActiveGame: true,\n  isWhiteTurn: true,\n  sourceSquare: {\n    rowIndex: -1,\n    columnIndex: -1\n  },\n  targetSquare: {\n    rowIndex: -1,\n    columnIndex: -1\n  },\n  selectedPiece: '',\n  isCheck: false,\n  isCheckmate: false,\n  moveNumber: 1,\n  history: [],\n  boardState: [\n    ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],\n    ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],\n    ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],\n    ['', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', ''],\n    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n    ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n  ]\n};\n\nexport const rowDictionary = [\n  '1', '2', '3', '4', '5', '6', '7', '8'\n];\n\nexport const columnDictionary = [\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'\n];\n\nconst GameStateContext = createContext();\n\n// export const useGameStateContext = () => useContext(GameStateContext);\n\nexport function useGameStateContext () {\n  return useContext(GameStateContext);\n}\n\nexport default function GameStateProvider ({ children }) {\n  const [gameState, setGameState] = useState(initialGameState);\n\n  const selectSquare = (rowIndex, columnIndex) => {\n    if (gameState.sourceSquare.rowIndex === -1) {\n      setGameState({\n        ...gameState,\n        sourceSquare: {\n          rowIndex,\n          columnIndex\n        }\n      });\n    } else {\n      setGameState({\n        ...gameState,\n        targetSquare: {\n          rowIndex,\n          columnIndex\n        }\n      });\n    }\n  };\n\n  const movePiece = (movedPiece, sourceSquare, targetSquare) => {\n    const boardState = gameState.boardState.map((row, rowIndex) => {\n      return row.map((piece, columnIndex) => {\n        if (rowIndex === sourceSquare.rowIndex && columnIndex === sourceSquare.columnIndex) {\n          return '';\n        } else if (rowIndex === targetSquare.rowIndex && columnIndex === targetSquare.columnIndex) {\n          return movedPiece;\n        } else {\n          return piece;\n        }\n      });\n    });\n    setGameState({\n      ...gameState,\n      boardState,\n      sourceSquare: {\n        rowIndex: -1,\n        columnIndex: -1\n      },\n      targetSquare: {\n        rowIndex: -1,\n        columnIndex: -1\n      }\n    });\n  };\n\n  return (\n    <GameStateContext.Provider value={{ gameState, selectSquare, movePiece }}>\n      {children}\n    </GameStateContext.Provider>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}