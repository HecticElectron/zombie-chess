{"ast":null,"code":"var _jsxFileName = \"/Users/hecticelectron/projects/zombie-chess/src/Square.js\",\n  _s = $RefreshSig$();\nimport React, { Component, createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\nimport GameStateProvider, { useGameStateContext, rowDictionary, columnDictionary } from './GameStateProvider';\nimport Piece, { checkForLegalMove } from './Piece';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Square({\n  rowIndex,\n  columnIndex\n}) {\n  _s();\n  const {\n    gameState,\n    selectSquare,\n    selectPiece,\n    movePiece\n  } = useGameStateContext();\n  const {\n    sourceSquare,\n    targetSquare\n  } = gameState;\n  const [squareState, setSquareState] = useState({\n    isSourceSquare: false,\n    isTargetSquare: false\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-row\": rowIndex,\n    \"data-column\": columnIndex,\n    className: `square ${squareState.isSourceSquare ? 'selected-source ' : squareState.isTargetSquare ? 'selected-target ' : ''}row${rowDictionary[rowIndex]} column${columnDictionary[columnIndex]}`,\n    onClick: event => {\n      const pieceToMove = gameState.selectedPiece;\n      if (sourceSquare.rowIndex === -1) {\n        setSquareState({\n          ...squareState,\n          isSourceSquare: true\n        });\n        selectSquare(rowIndex, columnIndex);\n        selectPiece(rowIndex, columnIndex);\n      } else if (checkForLegalMove(pieceToMove, sourceSquare, {\n        rowIndex,\n        columnIndex\n      })) {\n        setSquareState({\n          ...squareState,\n          isTargetSquare: true\n        });\n        movePiece(pieceToMove, sourceSquare, targetSquare);\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(Piece, {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_s(Square, \"e3KxnlCOVDuHcY1De9QOLvv00t0=\", false, function () {\n  return [useGameStateContext];\n});\n_c = Square;\nvar _c;\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"names":["React","Component","createContext","useContext","useReducer","useRef","useState","Suspense","lazy","useEffect","GameStateProvider","useGameStateContext","rowDictionary","columnDictionary","Piece","checkForLegalMove","jsxDEV","_jsxDEV","Square","rowIndex","columnIndex","_s","gameState","selectSquare","selectPiece","movePiece","sourceSquare","targetSquare","squareState","setSquareState","isSourceSquare","isTargetSquare","className","onClick","event","pieceToMove","selectedPiece","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hecticelectron/projects/zombie-chess/src/Square.js"],"sourcesContent":["import React, { Component, createContext, useContext, useReducer, useRef, useState, Suspense, lazy, useEffect } from 'react';\nimport GameStateProvider, { useGameStateContext, rowDictionary, columnDictionary } from './GameStateProvider';\nimport Piece, { checkForLegalMove } from './Piece';\n\nexport default function Square({ rowIndex, columnIndex }) {\n  const { gameState, selectSquare, selectPiece, movePiece } = useGameStateContext();\n  const { sourceSquare, targetSquare } = gameState;\n  const [squareState, setSquareState] = useState({\n    isSourceSquare: false,\n    isTargetSquare: false\n  });\n\n  return (\n    <div\n      data-row={rowIndex}\n      data-column={columnIndex}\n      className={`square ${squareState.isSourceSquare ? 'selected-source ' : (squareState.isTargetSquare ? 'selected-target ' : '')}row${rowDictionary[rowIndex]} column${columnDictionary[columnIndex]}`}\n      onClick={(event) => {\n        const pieceToMove = gameState.selectedPiece;\n        if (sourceSquare.rowIndex === -1) {\n          setSquareState({ ...squareState, isSourceSquare: true });\n          selectSquare(rowIndex, columnIndex);\n          selectPiece(rowIndex, columnIndex);\n        } else if (checkForLegalMove(pieceToMove, sourceSquare, { rowIndex, columnIndex })) {\n          setSquareState({ ...squareState, isTargetSquare: true });\n          movePiece(pieceToMove, sourceSquare, targetSquare);\n        }\n      }}\n    >\n      <Piece\n        rowIndex={rowIndex}\n        columnIndex={columnIndex}\n      />\n    </div>\n  );\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,QAAQ,OAAO;AAC5H,OAAOC,iBAAiB,IAAIC,mBAAmB,EAAEC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAC7G,OAAOC,KAAK,IAAIC,iBAAiB,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,MAAMA,CAAC;EAAEC,QAAQ;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACxD,MAAM;IAAEC,SAAS;IAAEC,YAAY;IAAEC,WAAW;IAAEC;EAAU,CAAC,GAAGd,mBAAmB,CAAC,CAAC;EACjF,MAAM;IAAEe,YAAY;IAAEC;EAAa,CAAC,GAAGL,SAAS;EAChD,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC;IAC7CwB,cAAc,EAAE,KAAK;IACrBC,cAAc,EAAE;EAClB,CAAC,CAAC;EAEF,oBACEd,OAAA;IACE,YAAUE,QAAS;IACnB,eAAaC,WAAY;IACzBY,SAAS,EAAE,UAAUJ,WAAW,CAACE,cAAc,GAAG,kBAAkB,GAAIF,WAAW,CAACG,cAAc,GAAG,kBAAkB,GAAG,EAAG,MAAMnB,aAAa,CAACO,QAAQ,CAAC,UAAUN,gBAAgB,CAACO,WAAW,CAAC,EAAG;IACpMa,OAAO,EAAGC,KAAK,IAAK;MAClB,MAAMC,WAAW,GAAGb,SAAS,CAACc,aAAa;MAC3C,IAAIV,YAAY,CAACP,QAAQ,KAAK,CAAC,CAAC,EAAE;QAChCU,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEE,cAAc,EAAE;QAAK,CAAC,CAAC;QACxDP,YAAY,CAACJ,QAAQ,EAAEC,WAAW,CAAC;QACnCI,WAAW,CAACL,QAAQ,EAAEC,WAAW,CAAC;MACpC,CAAC,MAAM,IAAIL,iBAAiB,CAACoB,WAAW,EAAET,YAAY,EAAE;QAAEP,QAAQ;QAAEC;MAAY,CAAC,CAAC,EAAE;QAClFS,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEG,cAAc,EAAE;QAAK,CAAC,CAAC;QACxDN,SAAS,CAACU,WAAW,EAAET,YAAY,EAAEC,YAAY,CAAC;MACpD;IACF,CAAE;IAAAU,QAAA,eAEFpB,OAAA,CAACH,KAAK;MACJK,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA;IAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACpB,EAAA,CA/BuBH,MAAM;EAAA,QACgCP,mBAAmB;AAAA;AAAA+B,EAAA,GADzDxB,MAAM;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}